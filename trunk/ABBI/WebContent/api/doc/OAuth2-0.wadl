<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="wadl.xsl" ?>
<application xmlns="http://wadl.dev.java.net/2009/02"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:h="http://www.w3.org/1999/xhtml"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xsi:schemaLocation="http://wadl.dev.java.net/2009/02 file:/C:/MDHT_CDATools_1.1.0/workspace-consol/ABBI/WebContent/WEB-INF/xsd/wadl.xsd">
  <doc title="OAuth 2.0 Web Application Description">
    <h:p>This document represents a a description of OAuth 2.0 in the
      Web Application Description Language (WADL). It is derived from
      the text of <h:a href="http://tools.ietf.org/html/rfc6749"
        >RFC-6749</h:a>. </h:p>
    <h:p/>
    <h:h2>License</h:h2>
    <h:p>Copyright (c) 2012 IETF Trust and the persons identified as
      authors of the code. All rights reserved. </h:p>
    <h:ul>
      <h:li> Redistribution and use in source and binary forms, with or
        without modification, are permitted provided that the following
        conditions are met: </h:li>
      <h:li> Redistributions of source code must retain the above
        copyright notice, this list of conditions and the following
        disclaimer.</h:li>
      <h:li> Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. </h:li>
    </h:ul>
    <h:p>Neither the name of Internet Society, IETF or IETF Trust, nor
      the names of specific contributors, may be used to endorse or
      promote products derived from this software without specific prior
      written permission.</h:p>
    <h:p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
      CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
      INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
      BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
      TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
      ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
      THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
      SUCH DAMAGE. </h:p>
  </doc>
  <grammars>
    <include>
      <doc>
        <h:p/>
      </doc>
    </include>
    <xs:element/>
  </grammars>
  <resource_type id="authorization_endpoint">
    <doc>
      <h:h2 id="section-3.1">3.1. Authorization Endpoint</h:h2>
      <h:p> The authorization endpoint is used to interact with the
        resource owner and obtain an authorization grant. The
        authorization server MUST first verify the identity of the
        resource owner. The way in which the authorization server
        authenticates the resource owner (e.g., username and password
        login, session cookies) is beyond the scope of this
        specification. </h:p>
      <h:p>The means through which the client obtains the location of
        the authorization endpoint are beyond the scope of this
        specification, but the location is typically provided in the
        service documentation. </h:p>
      <h:p>The endpoint URI MAY include an
        "application/x-www-form-urlencoded" formatted (per Appendix B)
        query component ([RFC3986] Section 3.4), which MUST be retained
        when adding additional query parameters. The endpoint URI MUST
        NOT include a fragment component. </h:p>
      <h:p>Since requests to the authorization endpoint result in user
        authentication and the transmission of clear-text credentials
        (in the HTTP response), the authorization server MUST require
        the use of TLS as described in <h:a href="#section-1.6">Section
          1.6</h:a> when sending requests to the authorization endpoint. </h:p>
      <h:p>The authorization server MUST support the use of the HTTP
        "GET" method [RFC2616] for the authorization endpoint and MAY
        support the use of the "POST" method as well.</h:p>
      <h:p>Parameters sent without a value MUST be treated as if they
        were omitted from the request. The authorization server MUST
        ignore unrecognized request parameters. Request and response
        parameters MUST NOT be included more than once.</h:p>
    </doc>
    <method/>
  </resource_type>
  <resource_type id="authorization_grant">
    <doc>
      <h:h3 id="section-1.3.1">1.3.1. Authorization Code</h:h3>
      <h:p>The authorization code is obtained by using an authorization
        server as an intermediary between the client and resource owner.
        Instead of requesting authorization directly from the resource
        owner, the client directs the resource owner to an authorization
        server (via its user-agent as defined in [RFC2616]), which in
        turn directs the resource owner back to the client with the
        authorization code. </h:p>
      <h:p> Before directing the resource owner back to the client with
        the authorization code, the authorization server authenticates
        the resource owner and obtains authorization. Because the
        resource owner only authenticates with the authorization server,
        the resource owner's credentials are never shared with the
        client. </h:p>
      <h:p> The authorization code provides a few important security
        benefits, such as the ability to authenticate the client, as
        well as the transmission of the access token directly to the
        client without passing it through the resource owner's
        user-agent and potentially exposing it to others, including the
        resource owner. </h:p>
    </doc>
    <method name="GET">
      <doc>
        <h:h1 id="section-4">4. Obtaining Authorization</h:h1>
        <h:p> To request an access token, the client obtains
          authorization from the resource owner. The authorization is
          expressed in the form of an authorization grant, which the
          client uses to request the access token. OAuth defines four
          grant types: authorization code, implicit, resource owner
          password credentials, and client credentials. It also provides
          an extension mechanism for defining additional grant
          types.</h:p>
        <h:h2 id="section-4.1">4.1. Authorization Code Grant</h:h2>
        <h:p>The authorization code grant type is used to obtain both
          access tokens and refresh tokens and is optimized for
          confidential clients. Since this is a redirection-based flow,
          the client must be capable of interacting with the resource
          owner's user-agent (typically a web browser) and capable of
          receiving incoming requests (via redirection) from the
          authorization server.</h:p>
        <h:pre xml:space="preserve"> <![CDATA[
     +----------+
     | Resource |
     |   Owner  |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+          Client Identifier      +---------------+
     |         -+----(A)-- & Redirection URI ---->|               |
     |  User-   |                                 | Authorization |
     |  Agent  -+----(B)-- User authenticates --->|     Server    |
     |          |                                 |               |
     |         -+----(C)-- Authorization Code ---<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (A)  (C)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(D)-- Authorization Code ---------'      |
     |  Client |          & Redirection URI                  |
     |         |                                             |
     |         |<---(E)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)
     
   Note: The lines illustrating steps (A), (B), and (C) are broken into 
   two parts as they pass through the user-agent.
   
                   Figure 3: Authorization Code Flow
]]>
        </h:pre>
        <h:p> The flow illustrated in Figure 3 includes the following
          steps: </h:p>
        <h:ol type="A">
          <h:li>The client initiates the flow by directing the resource
            owner's user-agent to the authorization endpoint. The client
            includes its client identifier, requested scope, local
            state, and a redirection URI to which the authorization
            server will send the user-agent back once access is granted
            (or denied). </h:li>
          <h:li>The authorization server authenticates the resource
            owner (via the user-agent) and establishes whether the
            resource owner grants or denies the client's access request. </h:li>
          <h:li>Assuming the resource owner grants access, the
            authorization server redirects the user-agent back to the
            client using the redirection URI provided earlier (in the
            request or during client registration). The redirection URI
            includes an authorization code and any local state provided
            by the client earlier.</h:li>
          <h:li>The client requests an access token from the
            authorization server's token endpoint by including the
            authorization code received in the previous step. When
            making the request, the client authenticates with the
            authorization server. The client includes the redirection
            URI used to obtain the authorization code for
            verification.</h:li>
          <h:li>The authorization server authenticates the client,
            validates the authorization code, and ensures that the
            redirection URI received matches the URI used to redirect
            the client in step (C). If valid, the authorization server
            responds back with an access token and, optionally, a
            refresh token.</h:li>
        </h:ol>
      </doc>
      <request>
        <doc>
          <h:h3 id="section-4.1.1">4.1.1. Authorization Request</h:h3>
          <h:p>The client constructs the request URI by adding the
            qameters to the query component of the authorization
            endpoint URI using the "application/x-www-form-urlencoded"
            format, per Appendix B: </h:p>
          <h:p> The client directs the resource owner to the constructed
            URI using an HTTP redirection response, or by other means
            available to it via the user-agent. </h:p>
          <h:p> For example, the client directs the user-agent to make
            the following HTTP request using TLS (with extra line breaks
            for display purposes only): </h:p>
          <h:pre xml:space="preserve">
GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz
&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
HTTP/1.1 Host: server.example.com
          </h:pre>
          <h:p> The authorization server validates the request to ensure
            that all required parameters are present and valid. If the
            request is valid, the authorization server authenticates the
            resource owner and obtains an authorization decision (by
            asking the resource owner or by establishing approval via
            other means). </h:p>
          <h:p> When a decision is established, the authorization server
            directs the user-agent to the provided client redirection
            URI using an HTTP redirection response, or by other means
            available to it via the user-agent. </h:p>
        </doc>
        <param style="header" required="false" name="Authorization">
          <doc></doc>
        </param>
        <param name="response_type" fixed="code" required="true"
          style="query" type="xs:string">
          <doc>
            <h:p>Value MUST be set to "code".</h:p>
          </doc>
        </param>
        <param name="client_id" required="true" style="query"
          type="xs:string">
          <doc>
            <h:p>The client identifier issued to the client during the
              registration process described by <h:a
                href="http://tools.ietf.org/html/rfc6749#section-2.2"
                >Section 2.2</h:a>.</h:p>
            <h:h2 id="section-2.2">2.2. Client Identifier</h:h2>
            <h:p> The authorization server issues the registered client
              a client identifier -- a unique string representing the
              registration information provided by the client. The
              client identifier is not a secret; it is exposed to the
              resource owner and MUST NOT be used alone for client
              authentication. The client identifier is unique to the
              authorization server. </h:p>
            <h:p> The client identifier string size is left undefined by
              this specification. The client should avoid making
              assumptions about the identifier size. The authorization
              server SHOULD document the size of any identifier it
              issues. </h:p>
          </doc>
        </param>
        <param name="redirect_uri" required="false" style="query"
          type="xs:string">
          <doc>
            <h:p>As described in <h:a
                href="http://tools.ietf.org/html/rfc6749#section-3.1.2"
                >Section 3.1.2.</h:a>
            </h:p>
            <h:h3 id="section-3.1.2">3.1.2. Redirection Endpoint</h:h3>
            <h:p>After completing its interaction with the resource
              owner, the authorization server directs the resource
              owner's user-agent back to the client. The authorization
              server redirects the user-agent to the client's
              redirection endpoint previously established with the
              authorization server during the client registration
              process or when making the authorization request. </h:p>
            <h:p> The redirection endpoint URI MUST be an absolute URI
              as defined by <h:a
                href="http://tools.ietf.org/html/rfc3986#section-4.3"
                >[RFC3986] Section 4.3</h:a>. The endpoint URI MAY
              include an "application/x-www-form-urlencoded" formatted
              (per Appendix B) query component ([RFC3986] Section 3.4),
              which MUST be retained when adding additional query
              parameters. The endpoint URI MUST NOT include a fragment
              component. </h:p>
          </doc>
        </param>
        <param name="scope" required="false" style="query"
          type="xs:string">
          <doc>
            <h:p>The scope of the access request as described by <h:a
                href="http://tools.ietf.org/html/rfc6749#section-3.3"
                >Section 3.3</h:a>.</h:p>
            <h:h2 id="section-3.3">3.3. Access Token Scope</h:h2>
            <h:p>The authorization and token endpoints allow the client
              to specify the scope of the access request using the
              "scope" request parameter. In turn, the authorization
              server uses the "scope" response parameter to inform the
              client of the scope of the access token issued. </h:p>
            <h:p> The value of the scope parameter is expressed as a
              list of space- delimited, case-sensitive strings. The
              strings are defined by the authorization server. If the
              value contains multiple space-delimited strings, their
              order does not matter, and each string adds an additional
              access range to the requested scope. </h:p>
            <h:pre xml:space="preserve">scope = scope-token *( SP scope-token ) 
scope-token = 1*( %x21 / %x23-5B / %x5D-7E )</h:pre>
            <h:p>The authorization server MAY fully or partially ignore
              the scope requested by the client, based on the
              authorization server policy or the resource owner's
              instructions. If the issued access token scope is
              different from the one requested by the client, the
              authorization server MUST include the "scope" response
              parameter to inform the client of the actual scope
              granted. </h:p>
            <h:p>If the client omits the scope parameter when requesting
              authorization, the authorization server MUST either
              process the request using a pre-defined default value or
              fail the request indicating an invalid scope. The
              authorization server SHOULD document its scope
              requirements and default value (if defined). </h:p>
          </doc>
        </param>
        <param name="state" required="false" style="query"
          type="xs:string">
          <doc>
            <h:p>RECOMMENDED. An opaque value used by the client to
              maintain state between the request and callback. The
              authorization server includes this value when redirecting
              the user-agent back to the client. The parameter SHOULD be
              used for preventing cross-site request forgery as
              described in <h:a href="#section-10.12">Section
                10.12</h:a>.</h:p>
            <h:h2 id="section-10.12">10.12. Cross-Site Request
              Forgery</h:h2>
            <h:p> Cross-site request forgery (CSRF) is an exploit in
              which an attacker causes the user-agent of a victim
              end-user to follow a malicious URI (e.g., provided to the
              user-agent as a misleading link, image, or redirection) to
              a trusting server (usually established via the presence of
              a valid session cookie). </h:p>
            <h:p>A CSRF attack against the client's redirection URI
              allows an attacker to inject its own authorization code or
              access token, which can result in the client using an
              access token associated with the attacker's protected
              resources rather than the victim's (e.g., save the
              victim's bank account information to a protected resource
              controlled by the attacker). </h:p>
            <h:p> The client MUST implement CSRF protection for its
              redirection URI. This is typically accomplished by
              requiring any request sent to the redirection URI endpoint
              to include a value that binds the request to the
              user-agent's authenticated state (e.g., a hash of the
              session cookie used to authenticate the user-agent). The
              client SHOULD utilize the "state" request parameter to
              deliver this value to the authorization server when making
              an authorization request. </h:p>
            <h:p> Once authorization has been obtained from the
              end-user, the authorization server redirects the
              end-user's user-agent back to the client with the required
              binding value contained in the "state" parameter. The
              binding value enables the client to verify the validity of
              the request by matching the binding value to the
              user-agent's authenticated state. The binding value used
              for CSRF protection MUST contain a non-guessable value (as
              described in <h:a href="#Section-10.10">Section
                10.10</h:a>), and the user-agent's authenticated state
              (e.g., session cookie, HTML5 local storage) MUST be kept
              in a location accessible only to the client and the
              user-agent (i.e., protected by same-origin policy). </h:p>
            <h:p> A CSRF attack against the authorization server's
              authorization endpoint can result in an attacker obtaining
              end-user authorization for a malicious client without
              involving or alerting the end-user. </h:p>
            <h:p> The authorization server MUST implement CSRF
              protection for its authorization endpoint and ensure that
              a malicious client cannot obtain authorization without the
              awareness and explicit consent of the resource owner.
            </h:p>
          </doc>
        </param>
      </request>
      <response status="302">
        <doc>
          <h:h3 id="section-4.1.2">4.1.2. Authorization Response</h:h3>
          <h:p>If the resource owner grants the access request, the
            authorization server issues an authorization code and
            delivers it to the client by adding the following parameters
            to the query component of the redirection URI using the
            "application/x-www-form-urlencoded" format, per Appendix B: </h:p>
          <h:p> For example, the authorization server redirects the
            user-agent by sending the following HTTP response: </h:p>
          <h:pre xml:space="preserve">
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
&amp;state=xyz 
            </h:pre>
          <h:p>The client MUST ignore unrecognized response parameters.
            The authorization code string size is left undefined by this
            specification. The client should avoid making assumptions
            about code value sizes. The authorization server SHOULD
            document the size of any value it issues. </h:p>
        </doc>
        <param name="Location" style="header" type="xs:uri">
          <doc>The redirection URI sent to the client. </doc>
        </param>
        <param name="code" required="true" style="query"
          type="xs:string">
          <doc>
            <h:p>The authorization code generated by the authorization
              server. The authorization code MUST expire shortly after
              it is issued to mitigate the risk of leaks. A maximum
              authorization code lifetime of 10 minutes is RECOMMENDED.
              The client MUST NOT use the authorization code more than
              once. If an authorization code is used more than once, the
              authorization server MUST deny the request and SHOULD
              revoke (when possible) all tokens previously issued based
              on that authorization code. The authorization code is
              bound to the client identifier and redirection URI.</h:p>
          </doc>
        </param>
        <param name="state" required="false" style="query"
          type="xs:string">
          <doc>
            <h:p>REQUIRED if the "state" parameter was present in the
              client authorization request. The exact value received
              from the client.</h:p>
          </doc>
        </param>
      </response>
      <response status="303">
        <doc>
          <h:h4 id="section-4.1.2.1">4.1.2.1. Error Response</h:h4>
          <h:p>If the request fails due to a missing, invalid, or
            mismatching redirection URI, or if the client identifier is
            missing or invalid, the authorization server SHOULD inform
            the resource owner of the error and MUST NOT automatically
            redirect the user-agent to the invalid redirection URI. </h:p>
          <h:p>If the resource owner denies the access request or if the
            request fails for reasons other than a missing or invalid
            redirection URI, the authorization server informs the client
            by adding the following parameters to the query component of
            the redirection URI using the
            "application/x-www-form-urlencoded" format, per Appendix
            B:</h:p>
          <h:p>For example, the authorization server redirects the
            user-agent by sending the following HTTP response:</h:p>
          <h:pre xml:space="preserve">
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&amp;state=xyz
            </h:pre>
        </doc>
        <param name="error" style="plain" required="true">
          <doc>A single ASCII [USASCII] error code from the
            following:</doc>
          <doc>Values for the "error" parameter MUST NOT include
            characters outside the set %x20-21 / %x23-5B /
            %x5D-7E.</doc>
          <option value="invalid_request">
            <doc>The request is missing a required parameter, includes
              an invalid parameter value, includes a parameter more than
              once, or is otherwise malformed.</doc>
          </option>
          <option value="unauthorized_client">
            <doc>The client is not authorized to request an
              authorization code using this method.</doc>
          </option>
          <option value="access_denied">
            <doc>The resource owner or authorization server denied the
              request.</doc>
          </option>
          <option value="unsupported_response_type">
            <doc>The authorization server does not support obtaining an
              authorization code using this method.</doc>
          </option>
          <option value="invalid_scope">
            <doc>The requested scope is invalid, unknown, or
              malformed.</doc>
          </option>
          <option value="server_error">
            <doc>The authorization server encountered an unexpected
              condition that prevented it from fulfilling the request.
              (This error code is needed because a 500 Internal Server
              Error HTTP status code cannot be returned to the client
              via an HTTP redirect.)</doc>
          </option>
          <option value="temporarily_unavailable">
            <doc>The authorization server is currently unable to handle
              the request due to a temporary overloading or maintenance
              of the server. (This error code is needed because a 503
              Service Unavailable HTTP status code cannot be returned to
              the client via an HTTP redirect.)</doc>
          </option>
        </param>
        <param name="error_description" style="plain" required="false">
          <doc>Human-readable ASCII [USASCII] text providing additional
            information, used to assist the client developer in
            understanding the error that occurred. Values for the
            "error_description" parameter MUST NOT include characters
            outside the set %x20-21 / %x23-5B / %x5D-7E. </doc>
        </param>
        <param name="error_uri" style="plain" required="false">
          <doc>A URI identifying a human-readable web page with
            information about the error, used to provide the client
            developer with additional information about the error.
            Values for the "error_uri" parameter MUST conform to the
            URI-reference syntax and thus MUST NOT include characters
            outside the set %x21 / %x23-5B / %x5D-7E.</doc>
        </param>
        <param name="state" style="plain" required="false">
          <doc>REQUIRED if a "state" parameter was present in the client
            authorization request. The exact value received from the
            client.</doc>
        </param>
      </response>
    </method>
  </resource_type>
  <resource_type id="implicit_grant">
    <doc>
      <h:h3 id="section-1.3.2">1.3.2. Implicit</h:h3>
      <h:p> The implicit grant is a simplified authorization code flow
        optimized for clients implemented in a browser using a scripting
        language such as JavaScript. In the implicit flow, instead of
        issuing the client an authorization code, the client is issued
        an access token directly (as the result of the resource owner
        authorization). The grant type is implicit, as no intermediate
        credentials (such as an authorization code) are issued (and
        later used to obtain an access token). </h:p>
      <h:p>When issuing an access token during the implicit grant flow,
        the authorization server does not authenticate the client. In
        some cases, the client identity can be verified via the
        redirection URI used to deliver the access token to the client.
        The access token may be exposed to the resource owner or other
        applications with access to the resource owner's user-agent. </h:p>
      <h:p>Implicit grants improve the responsiveness and efficiency of
        some clients (such as a client implemented as an in-browser
        application), since it reduces the number of round trips
        required to obtain an access token. However, this convenience
        should be weighed against the security implications of using
        implicit grants, such as those described in Sections 10.3 and
        10.16, especially when the authorization code grant type is
        available.</h:p>
    </doc>
    <method name="GET">
      <doc>
        <h:h2>4.2. Implicit Grant</h:h2>
        <h:p>The implicit grant type is used to obtain access tokens (it
          does not support the issuance of refresh tokens) and is
          optimized for public clients known to operate a particular
          redirection URI. These clients are typically implemented in a
          browser using a scripting language such as JavaScript.</h:p>
        <h:p>Since this is a redirection-based flow, the client must be
          capable of interacting with the resource owner's user-agent
          (typically a web browser) and capable of receiving incoming
          requests (via redirection) from the authorization
          server.</h:p>
        <h:p>Unlike the authorization code grant type, in which the
          client makes separate requests for authorization and for an
          access token, the client receives the access token as the
          result of the authorization request.</h:p>
        <h:p>The implicit grant type does not include client
          authentication, and relies on the presence of the resource
          owner and the registration of the redirection URI. Because the
          access token is encoded into the redirection URI, it may be
          exposed to the resource owner and other applications residing
          on the same device.</h:p>
        <h:pre xml:space="preserve"> <![CDATA[
     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+          Client Identifier     +---------------+
     |         -+----(A)-- & Redirection URI --->|               |
     |  User-   |                                | Authorization |
     |  Agent  -|----(B)-- User authenticates -->|     Server    |
     |          |                                |               |
     |          |<---(C)--- Redirection URI ----<|               |
     |          |          with Access Token     +---------------+
     |          |            in Fragment
     |          |                                +---------------+
     |          |----(D)--- Redirection URI ---->|   Web-Hosted  |
     |          |          without Fragment      |     Client    |
     |          |                                |    Resource   |
     |     (F)  |<---(E)------- Script ---------<|               |
     |          |                                +---------------+
     +-|--------+
       |    |
      (A)  (G) Access Token
       |    |
       ^    v
     +---------+
     |         |
     |  Client |
     |         |
     +---------+

   Note: The lines illustrating steps (A) and (B) are broken into two
   parts as they pass through the user-agent.

                       Figure 4: Implicit Grant Flow
]]> </h:pre>
        <h:p>The flow illustrated in Figure 4 includes the following
          steps:</h:p>
        <h:ol type="A">
          <h:li>The client initiates the flow by directing the resource
            owner's user-agent to the authorization endpoint. The client
            includes its client identifier, requested scope, local
            state, and a redirection URI to which the authorization
            server will send the user-agent back once access is granted
            (or denied).</h:li>
          <h:li>The authorization server authenticates the resource
            owner (via the user-agent) and establishes whether the
            resource owner grants or denies the client's access
            request.</h:li>
          <h:li>Assuming the resource owner grants access, the
            authorization server redirects the user-agent back to the
            client using the redirection URI provided earlier. The
            redirection URI includes the access token in the URI
            fragment.</h:li>
          <h:li>The user-agent follows the redirection instructions by
            making a request to the web-hosted client resource (which
            does not include the fragment per [RFC2616]). The user-agent
            retains the fragment information locally.</h:li>
          <h:li>The web-hosted client resource returns a web page
            (typically an HTML document with an embedded script) capable
            of accessing the full redirection URI including the fragment
            retained by the user-agent, and extracting the access token
            (and other parameters) contained in the fragment.</h:li>
          <h:li>The user-agent executes the script provided by the
            web-hosted client resource locally, which extracts the
            access token.</h:li>
          <h:li>The user-agent passes the access token to the
            client.</h:li>
        </h:ol>
        <h:p>See Sections 1.3.2 and 9 for background on using the
          implicit grant.</h:p>
        <h:p>See Sections 10.3 and 10.16 for important security
          considerations when using the implicit grant.</h:p>
      </doc>
      <request>
        <doc>
          <h:h3 id="section-4.2.1">4.2.1. Authorization Request</h:h3>
          <h:p>The client constructs the request URI by adding the
            following parameters to the query component of the
            authorization endpoint URI using the
            "application/x-www-form-urlencoded" format, per Appendix B:
          </h:p>
        </doc>

        <param name="response_type" style="query" required="true">
          <doc>
            <h:p>Value MUST be set to "token".</h:p>
          </doc>
        </param>

        <param name="client_id" style="query" required="true">
          <doc>
            <h:p>The client identifier as described in <h:a
                href="#section-2.2">Section 2.2</h:a>.</h:p>
          </doc>
        </param>

        <param name="redirect_uri" style="query" required="false">
          <doc>
            <h:p>As described in <h:a href="#section-3.1.2">Section
                3.1.2</h:a>.</h:p>
          </doc>
        </param>

        <param name="scope" style="query" required="false">
          <doc>
            <h:p>The scope of the access request as described by Section
              3.3.</h:p>
          </doc>
        </param>

        <param name="state" style="query" required="false">
          <doc>
            <h:p> RECOMMENDED. An opaque value used by the client to
              maintain state between the request and callback. The
              authorization server includes this value when redirecting
              the user-agent back to the client. The parameter SHOULD be
              used for preventing cross-site request forgery as
              described in <h:a href="#section-10.12">Section
                10.12</h:a>.</h:p>
          </doc>
        </param>

        <h:p>The client directs the resource owner to the constructed
          URI using an HTTP redirection response, or by other means
          available to it via the user-agent. </h:p>
        <h:p>For example, the client directs the user-agent to make the
          following HTTP request using TLS (with extra line breaks for
          display purposes only): </h:p>
        <h:pre xml:space="preserve">GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz
    &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
        </h:pre>
        <h:p>The authorization server validates the request to ensure
          that all required parameters are present and valid. The
          authorization server MUST verify that the redirection URI to
          which it will redirect the access token matches a redirection
          URI registered by the client as described in <h:a
            href="#section-3.1.2">Section 3.1.2</h:a>. </h:p>
        <h:p>If the request is valid, the authorization server
          authenticates the resource owner and obtains an authorization
          decision (by asking the resource owner or by establishing
          approval via other means). </h:p>
        <h:p>When a decision is established, the authorization server
          directs the user-agent to the provided client redirection URI
          using an HTTP redirection response, or by other means
          available to it via the user-agent. </h:p>
      </request>
      <response status="302">
        <doc>
          <h:h3 id="section-4.2.2">4.2.2. Access Token Response</h:h3>
          <h:p>If the resource owner grants the access request, the
            authorization server issues an access token and delivers it
            to the client by adding the following parameters to the
            fragment component of the redirection URI using the
            "application/x-www-form-urlencoded" format, per Appendix
            B:</h:p>
          <h:p>The authorization server MUST NOT issue a refresh
            token.</h:p>
          <h:p>For example, the authorization server redirects the
            user-agent by sending the following HTTP response (with
            extra line breaks for display purposes only):</h:p>
          <h:pre xml:space="preserve">HTTP/1.1 302 Found
Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA
          &amp;state=xyz&amp;token_type=example&amp;expires_in=3600
          </h:pre>
          <h:p>Developers should note that some user-agents do not
            support the inclusion of a fragment component in the HTTP
            "Location" response header field. Such clients will require
            using other methods for redirecting the client than a 3xx
            redirection response -- for example, returning an HTML page
            that includes a 'continue' button with an action linked to
            the redirection URI.</h:p>
          <h:p>The client MUST ignore unrecognized response parameters.
            The access token string size is left undefined by this
            specification. The client should avoid making assumptions
            about value sizes. The authorization server SHOULD document
            the size of any value it issues.</h:p>
        </doc>

        <param name="access_token" style="query" required="true">
          <doc>
            <h:p>The access token issued by the authorization
              server.</h:p>
          </doc>
        </param>

        <param name="token_type" style="query" required="true">
          <doc>
            <h:p>The type of the token issued as described in Section
              7.1. Value is case insensitive.</h:p>
            <h:h2 id="section-7.1">7.1. Access Token Types</h:h2>
            <h:p> The access token type provides the client with the
              information required to successfully utilize the access
              token to make a protected resource request (along with
              type-specific attributes). The client MUST NOT use an
              access token if it does not understand the token
              type.</h:p>
            <h:p>The examples below are provided for illustration
              purposes only. Developers are advised to consult the [<h:a
                href="http://tools.ietf.org/html/rfc6750">RFC6750</h:a>]
              and [<h:a
                href="http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01"
                >OAuth-HTTP-MAC</h:a>] specifications before use. </h:p>
            <h:p>Each access token type definition specifies the
              additional attributes (if any) sent to the client together
              with the "access_token" response parameter. It also
              defines the HTTP authentication method used to include the
              access token when making a protected resource
              request.</h:p>
          </doc>
          <option value="Bearer">
            <doc><h:p> For example, the "bearer" token type defined in
                [RFC6750] is utilized by simply including the access
                token string in the request:</h:p>
              <h:pre xml:space="preserve">GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM</h:pre>
            </doc>
          </option>
          <option value="MAC">
            <doc>
              <h:p>while the "mac" token type defined in
                [OAuth-HTTP-MAC] is utilized by issuing a Message
                Authentication Code (MAC) key together with the access
                token that is used to sign certain components of the
                HTTP requests:</h:p>
              <h:pre xml:space="preserve">GET /resource/1 HTTP/1.1
Host: example.com
Authorization: MAC id="h480djs93hd8",
               nonce="274312:dj83hs9s",
               mac="kDZvddkndxvhGRXZhvuDjEWhGeE="</h:pre>
            </doc>
          </option>
        </param>
        <param name="expires_in" style="query" required="false">
          <doc>
            <h:p>RECOMMENDED. The lifetime in seconds of the access
              token. For example, the value "3600" denotes that the
              access token will expire in one hour from the time the
              response was generated. If omitted, the authorization
              server SHOULD provide the expiration time via other means
              or document the default value.</h:p>
          </doc>
        </param>

        <param name="scope" style="query" required="false">
          <doc>
            <h:p>OPTIONAL, if identical to the scope requested by the
              client; otherwise, REQUIRED. The scope of the access token
              as described by <h:a href="#section-3.3">Section
              3.3</h:a>.</h:p>
          </doc>
        </param>
        <param name="state" style="query" required="true">
          <doc>
            <h:p>REQUIRED if the "state" parameter was present in the
              client authorization request. The exact value received
              from the client.</h:p>
          </doc>
        </param>
      </response>
      <response status="303">
        <doc>
          <h:h4 id="section-4.2.2.1">4.2.2.1. Error Response</h:h4>
          <h:p>If the request fails due to a missing, invalid, or
            mismatching redirection URI, or if the client identifier is
            missing or invalid, the authorization server SHOULD inform
            the resource owner of the error and MUST NOT automatically
            redirect the user-agent to the invalid redirection
            URI.</h:p>
          <h:p>If the resource owner denies the access request or if the
            request fails for reasons other than a missing or invalid
            redirection URI, the authorization server informs the client
            by adding the following parameters to the fragment component
            of the redirection URI using the
            "application/x-www-form-urlencoded" format, per Appendix
            B:</h:p>
          <h:p>Values for the "error" parameter MUST NOT include
            characters outside the set %x20-21 / %x23-5B / %x5D-7E. </h:p>
          <h:p>For example, the authorization server redirects the
            user-agent by sending the following HTTP response:</h:p>
          <h:pre xml:space="preserve">HTTP/1.1 302 Found
Location: https://client.example.com/cb#error=access_denied&amp;state=xyz
          </h:pre>
        </doc>

        <param name="error" style="query" required="true">
          <doc>
            <h:p>REQUIRED. A single ASCII [USASCII] error code from the
              following: </h:p>
          </doc>
          <option value="invalid_request">
            <doc>
              <h:p>The request is missing a required parameter, includes
                an invalid parameter value, includes a parameter more
                than once, or is otherwise malformed. </h:p>
            </doc>
          </option>

          <option value="unauthorized_client">
            <doc>
              <h:p>The client is not authorized to request an access
                token using this method. </h:p>
            </doc>
          </option>

          <option value="access_denied">
            <doc>
              <h:p>The resource owner or authorization server denied the
                request. </h:p>
            </doc>
          </option>

          <option value="unsupported_response_type">
            <doc>
              <h:p>The authorization server does not support obtaining
                an access token using this method. </h:p>
            </doc>
          </option>

          <option value="invalid_scope">
            <doc>
              <h:p>The requested scope is invalid, unknown, or
                malformed. </h:p>
            </doc>
          </option>

          <option value="server_error">
            <doc>
              <h:p>The authorization server encountered an unexpected
                condition that prevented it from fulfilling the request.
                (This error code is needed because a 500 Internal Server
                Error HTTP status code cannot be returned to the client
                via an HTTP redirect.)</h:p>
            </doc>
          </option>

          <option value="temporarily_unavailable">
            <doc>
              <h:p>The authorization server is currently unable to
                handle the request due to a temporary overloading or
                maintenance of the server. (This error code is needed
                because a 503 Service Unavailable HTTP status code
                cannot be returned to the client via an HTTP redirect.)
              </h:p>
            </doc>
          </option>
        </param>

        <param name="error_description" style="query" required="false">
          <doc>
            <h:p>OPTIONAL. Human-readable ASCII [USASCII] text providing
              additional information, used to assist the client
              developer in understanding the error that occurred. Values
              for the "error_description" parameter MUST NOT include
              characters outside the set %x20-21 / %x23-5B /
              %x5D-7E.</h:p>
          </doc>
        </param>

        <param name="error_uri" style="query" required="false">
          <doc>
            <h:p>OPTIONAL. A URI identifying a human-readable web page
              with information about the error, used to provide the
              client developer with additional information about the
              error. Values for the "error_uri" parameter MUST conform
              to the URI-reference syntax and thus MUST NOT include
              characters outside the set %x21 / %x23-5B / %x5D-7E.</h:p>
          </doc>
        </param>

        <param name="state" style="query" required="false">
          <doc>
            <h:p>REQUIRED if a "state" parameter was present in the
              client authorization request. The exact value received
              from the client. </h:p>
          </doc>
        </param>
      </response>
    </method>
  </resource_type>
  <resource_type id="access_token">
    <doc>
      <h:h2 id="section-3.2">3.2. Token Endpoint</h:h2>
      <h:p>The token endpoint is used by the client to obtain an access
        token by presenting its authorization grant or refresh token.
        The token endpoint is used with every authorization grant except
        for the implicit grant type (since an access token is issued
        directly). </h:p>
      <h:p>The means through which the client obtains the location of
        the token endpoint are beyond the scope of this specification,
        but the location is typically provided in the service
        documentation. </h:p>
      <h:p>The endpoint URI MAY include an
        "application/x-www-form-urlencoded" formatted (per Appendix B)
        query component ([RFC3986] Section 3.4), which MUST be retained
        when adding additional query parameters. The endpoint URI MUST
        NOT include a fragment component.</h:p>
      <h:p>Since requests to the token endpoint result in the
        transmission of clear-text credentials (in the HTTP request and
        response), the authorization server MUST require the use of TLS
        as described in <h:a href="#section-1.6">Section 1.6</h:a> when
        sending requests to the token endpoint. </h:p>
      <h:p>The client MUST use the HTTP "POST" method when making access
        token requests. </h:p>
      <h:p>Parameters sent without a value MUST be treated as if they
        were omitted from the request. The authorization server MUST
        ignore unrecognized request parameters. Request and response
        parameters MUST NOT be included more than once.</h:p>
    </doc>
    <method name="POST">
      <doc>
        <h:h3 id="section-4.1.3">4.1.3. Access Token Request</h:h3>
        <h:p>The client makes a request to the token endpoint by sending
          the following parameters using the
          "application/x-www-form-urlencoded" format per Appendix B with
          a character encoding of UTF-8 in the HTTP request
          entity-body:</h:p>
        <h:p>If the client type is confidential or the client was issued
          client credentials (or assigned other authentication
          requirements), the client MUST authenticate with the
          authorization server as described in <h:a
            href="#section-3.2.1">Section 3.2.1</h:a>. </h:p>
        <h:p> For example, the client makes the following HTTP request
          using TLS (with extra line breaks for display purposes only): </h:p>
        <h:pre xml:space="preserve">
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded
      
grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA
&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
            </h:pre>
      </doc>
      <request>
        <param name="Authorization" style="header">
          <doc>
            <h:h3 id="section-3.2.1">3.2.1. Client Authentication</h:h3>
            <h:p>Confidential clients or other clients issued client
              credentials MUST authenticate with the authorization
              server as described in <h:a
                href="http://tools.ietf.org/html/rfc6749#section-2.3"
                >Section 2.3</h:a> when making requests to the token
              endpoint. Client authentication is used for: </h:p>
            <h:ul>
              <h:li>Enforcing the binding of refresh tokens and
                authorization codes to the client they were issued to.
                Client authentication is critical when an authorization
                code is transmitted to the redirection endpoint over an
                insecure channel or when the redirection URI has not
                been registered in full.</h:li>
              <h:li>Recovering from a compromised client by disabling
                the client or changing its credentials, thus preventing
                an attacker from abusing stolen refresh tokens. Changing
                a single set of client credentials is significantly
                faster than revoking an entire set of refresh
                tokens.</h:li>
              <h:li>Implementing authentication management best
                practices, which require periodic credential rotation.
                Rotation of an entire set of refresh tokens can be
                challenging, while rotation of a single set of client
                credentials is significantly easier.</h:li>
            </h:ul>
            <h:p>A client MAY use the "client_id" request parameter to
              identify itself when sending requests to the token
              endpoint. In the "authorization_code" "grant_type" request
              to the token endpoint, an unauthenticated client MUST send
              its "client_id" to prevent itself from inadvertently
              accepting a code intended for a client with a different
              "client_id". This protects the client from substitution of
              the authentication code. (It provides no additional
              security for the protected resource.) </h:p>
          </doc>
        </param>
        <param name="grant_type" style="query" type="xs:string"
          fixed="authorization_code" required="true">
          <doc>
            <h:p>Value MUST be set to "authorization_code".</h:p>
          </doc>
        </param>
        <param name="code" style="query" type="xs:string"
          required="true">
          <doc>
            <h:p>The authorization code received from the authorization
              server. </h:p>
          </doc>
        </param>
        <param name="redirect_uri" style="query" type="xs:string"
          required="false">
          <doc>
            <h:p>REQUIRED, if the "redirect_uri" parameter was included
              in the authorization request as described in Section
              4.1.1, and their values MUST be identical. </h:p>
          </doc>
        </param>
        <param name="client_id" style="query" type="xs:string"
          required="false">
          <doc>
            <h:p>REQUIRED, if the client is not authenticating with the
              authorization server as described in <h:a
                href="#section-3.2.1">Section 3.2.1</h:a>. </h:p>
          </doc>
        </param>
      </request>
      <response status="200">
        <doc>
          <h:p>The authorization server MUST:</h:p>
          <h:ul>
            <h:li>require client authentication for confidential clients
              or for any client that was issued client credentials (or
              with other authentication requirements),</h:li>
            <h:li>authenticate the client if client authentication is
              included,</h:li>
            <h:li>ensure that the authorization code was issued to the
              authenticated confidential client, or if the client is
              public, ensure that the code was issued to "client_id" in
              the request,</h:li>
            <h:li>verify that the authorization code is valid,
              and</h:li>
            <h:li>ensure that the "redirect_uri" parameter is present if
              the "redirect_uri" parameter was included in the initial
              authorization request as described in <h:a
                href="#section-4.1.1">Section 4.1.1</h:a>, and if
              included ensure that their values are identical.</h:li>
          </h:ul>
          <h:h3 id="section-4.1.4">4.1.4. Access Token Response</h:h3>
          <h:p> If the access token request is valid and authorized, the
            authorization server issues an access token and optional
            refresh token as described in <h:a href="#section-5.1"
              >Section 5.1</h:a>. If the request client authentication
            failed or is invalid, the authorization server returns an
            error response as described in <h:a href="#section-5.2"
              >Section 5.2</h:a>. </h:p>
          <h:p>An example successful response:</h:p>
          <h:pre xml:space="preserve">
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
"access_token":"2YotnFZFEjr1zCsicMWpAA",
"token_type":"example",
"expires_in":3600,
"refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
"example_parameter":"example_value"
}
            </h:pre>
        </doc>
        <representation href="#success"/>
      </response>
      <response status="400">
        <doc>
          <h:h2 id="section-5.2">5.2. Error Response</h:h2>
          <h:p>The authorization server responds with an HTTP 400 (Bad
            Request) status code (unless specified otherwise) and
            includes the following parameters with the response: </h:p>
        </doc>
        <representation href="#failure"/>
      </response>
    </method>
  </resource_type>
  <representation id="success" mediaType="application/json">
    <doc>
      <h:h1 id="section-5">5. Issuing an Access Token</h:h1>
      <h:p> If the access token request is valid and authorized, the
        authorization server issues an access token and optional
        refresh token as described in <h:a href="#section-5.1"
          >Section 5.1</h:a>. If the request failed client
        authentication or is invalid, the authorization server
        returns an error response as described in <h:a
          href="#section-5.2">Section 5.2</h:a>. </h:p>
      <h:h2 id="section-5.1">5.1. Successful Response</h:h2>
      <h:p>The authorization server issues an access token and
        optional refresh token, and constructs the response by
        adding the following parameters to the entity-body of the
        HTTP response with a 200 (OK) status code: </h:p>            <h:p>The parameters are included in the entity-body of the
          HTTP response using the "application/json" media type as
          defined by [RFC4627]. The parameters are serialized into a
          JavaScript Object Notation (JSON) structure by adding each
          parameter at the highest structure level. Parameter names
          and string values are included as JSON strings. Numerical
          values are included as JSON numbers. The order of
          parameters does not matter and can vary. </h:p>
      <h:p>The authorization server MUST include the HTTP
        "Cache-Control" response header field [RFC2616] with a
        value of "no-store" in any response containing tokens,
        credentials, or other sensitive information, as well as
        the "Pragma" response header field [RFC2616] with a value
        of "no-cache". </h:p>
      <h:p>For example:</h:p>
      <h:pre xml:space="preserve">
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
"access_token":"2YotnFZFEjr1zCsicMWpAA",
"token_type":"example",
"expires_in":3600,
"refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
"example_parameter":"example_value"
}
            </h:pre>
      <h:p>The client MUST ignore unrecognized value names in the
        response. The sizes of tokens and other values received
        from the authorization server are left undefined. The
        client should avoid making assumptions about value sizes.
        The authorization server SHOULD document the size of any
        value it issues.</h:p>
    </doc>
    <param name="access_token" style="plain" required="true">
      <doc>
        <h:p>The access token issued by the authorization
          server.</h:p>
      </doc>
    </param>
    <param name="token_type" style="plain" required="true">
      <doc>
        <h:p>The type of the token issued as described in Section
          7.1. Value is case insensitive.</h:p>
      </doc>
    </param>
    <param name="expires_in" style="plain" required="true">
      <doc>
        <h:p>RECOMMENDED. The lifetime in seconds of the access
          token. For example, the value "3600" denotes that the
          access token will expire in one hour from the time the
          response was generated. If omitted, the authorization
          server SHOULD provide the expiration time via other
          means or document the default value.</h:p>
      </doc>
    </param>
    <param name="refresh_token" style="plain" required="false">
      <doc>
        <h:p>OPTIONAL. The refresh token, which can be used to
          obtain new access tokens using the same authorization
          grant as described in <h:a href="#section-6">Section
            6</h:a>.</h:p>
      </doc>
    </param>
    <param name="scope" style="plain" required="false">
      <doc>
        <h:p>OPTIONAL, if identical to the scope requested by the
          client; otherwise, REQUIRED. The scope of the access
          token as described by <h:a href="#section-3.3">Section
            3.3</h:a>.</h:p>
      </doc>
    </param>
  </representation>
  <representation id="failure" mediaType="application/json">
    <doc>
      <h:p>The parameters are included in the entity-body of the
        HTTP response using the "application/json" media type as
        defined by [RFC4627]. The parameters are serialized into a
        JSON structure by adding each parameter at the highest
        structure level. Parameter names and string values are
        included as JSON strings. Numerical values are included as
        JSON numbers. The order of parameters does not matter and
        can vary.</h:p>
      <h:p>For example:</h:p>
      <h:pre xml:space="preserve">
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
"error":"invalid_request"
}        
              </h:pre>
    </doc>
    <param name="error" style="plain" required="true">
      <doc>
        <h:p>A single ASCII [USASCII] error code from the
          following:</h:p>
        <h:p>Values for the "error" parameter MUST NOT include
          characters outside the set %x20-21 / %x23-5B / %x5D-7E.
        </h:p>
      </doc>
      <option value="invalid_request">
        <doc>
          <h:p> The request is missing a required parameter,
            includes an unsupported parameter value (other than
            grant type), repeats a parameter, includes multiple
            credentials, utilizes more than one mechanism for
            authenticating the client, or is otherwise
            malformed.</h:p>
        </doc>
      </option>
      <option value="invalid_client">
        <doc>
          <h:p>Client authentication failed (e.g., unknown client,
            no client authentication included, or unsupported
            authentication method). The authorization server MAY
            return an HTTP 401 (Unauthorized) status code to
            indicate which HTTP authentication schemes are
            supported. If the client attempted to authenticate via
            the "Authorization" request header field, the
            authorization server MUST respond with an HTTP 401
            (Unauthorized) status code and include the
            "WWW-Authenticate" response header field matching the
            authentication scheme used by the client.</h:p>
        </doc>
      </option>
      <option value="invalid_grant">
        <doc>
          <h:p>The provided authorization grant (e.g.,
            authorization code, resource owner credentials) or
            refresh token is invalid, expired, revoked, does not
            match the redirection URI used in the authorization
            request, or was issued to another client.</h:p>
        </doc>
      </option>
      <option value="unauthorized_client">
        <doc>
          <h:p>The authenticated client is not authorized to use
            this authorization grant type.</h:p>
        </doc>
      </option>
      <option value="unsupported_grant_type">
        <doc>
          <h:p>The authorization grant type is not supported by
            the authorization server.</h:p>
        </doc>
      </option>
      <option value="invalid_scope">
        <doc>
          <h:p>The requested scope is invalid, unknown, malformed,
            or exceeds the scope granted by the resource
            owner.</h:p>
        </doc>
      </option>
    </param>
    <param name="error_description" style="plain" required="false">
      <doc>
        <h:p>OPTIONAL. Human-readable ASCII [USASCII] text
          providing additional information, used to assist the
          client developer in understanding the error that
          occurred.</h:p>
        <h:p>Values for the "error_description" parameter MUST NOT
          include characters outside the set %x20-21 / %x23-5B /
          %x5D-7E.</h:p>
      </doc>
    </param>
    <param name="error_uri" style="plain" required="false">
      <doc>
        <h:p>OPTIONAL. A URI identifying a human-readable web page
          with information about the error, used to provide the
          client developer with additional information about the
          error. Values for the "error_uri" parameter MUST conform
          to the URI-reference syntax and thus MUST NOT include
          characters outside the set %x21 / %x23-5B / %x5D-7E.
        </h:p>
      </doc>
    </param>
  </representation>  
  <resource_type id="password_credentials_grant">
    <doc><h:h2>4.3. Resource Owner Password Credentials Grant</h:h2>
      <h:p>The resource owner password credentials grant type is
        suitable in cases where the resource owner has a trust
        relationship with the client, such as the device operating
        system or a highly privileged application. The authorization
        server should take special care when enabling this grant type
        and only allow it when other flows are not viable.</h:p>
      <h:p>This grant type is suitable for clients capable of obtaining
        the resource owner's credentials (username and password,
        typically using an interactive form). It is also used to migrate
        existing clients using direct authentication schemes such as
        HTTP Basic or Digest authentication to OAuth by converting the
        stored credentials to an access token.</h:p>
      <h:pre xml:space="preserve"><![CDATA[
     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
          v
          |    Resource Owner
         (A) Password Credentials
          |
          v
     +---------+                                  +---------------+
     |         |>--(B)---- Resource Owner ------->|               |
     |         |         Password Credentials     | Authorization |
     | Client  |                                  |     Server    |
     |         |<--(C)---- Access Token ---------<|               |
     |         |    (w/ Optional Refresh Token)   |               |
     +---------+                                  +---------------+

            Figure 5: Resource Owner Password Credentials Flow
]]></h:pre>
      <h:p>The flow illustrated in Figure 5 includes the following
        steps:</h:p>
      <h:ol type="A"><h:li>The resource owner provides the client with
          its username and password.</h:li>
        <h:li>The client requests an access token from the authorization
          server's token endpoint by including the credentials received
          from the resource owner. When making the request, the client
          authenticates with the authorization server.</h:li>
        <h:li>The authorization server authenticates the client and
          validates the resource owner credentials, and if valid, issues
          an access token.</h:li></h:ol>
    </doc>
    <method name="POST">
      <doc>
        <h:h3 id="section-4.3.1">4.3.1. Authorization Request and
          Response</h:h3>
        <h:p>The method through which the client obtains the resource
          owner credentials is beyond the scope of this specification.
          The client MUST discard the credentials once an access token
          has been obtained.</h:p></doc>
      <request>
        <doc>
          <h:h3 id="section-4.3.2">4.3.2. Access Token Request</h:h3>
          <h:p>The client makes a request to the token endpoint by
            adding the following parameters using the
            "application/x-www-form-urlencoded" format per Appendix B
            with a character encoding of UTF-8 in the HTTP request
            entity-body:</h:p>
          <h:p>If the client type is confidential or the client was
            issued client credentials (or assigned other authentication
            requirements), the client MUST authenticate with the
            authorization server as described in <h:a
              href="#section-3.2.1">Section 3.2.1</h:a>.</h:p>
          <h:p>For example, the client makes the following HTTP request
            using transport-layer security (with extra line breaks for
            display purposes only):</h:p>
          <h:pre xml:space="preserve">POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=password&amp;username=johndoe&amp;password=A3ddj3w
   </h:pre>
        </doc>
        <param style="query" required="true" fixed="password"
          name="grant_type">
          <doc><h:p>Value MUST be set to "password".</h:p></doc>
        </param>
        <param style="query" required="true" name="username">
          <doc><h:p>The resource owner username.</h:p></doc>
        </param>
        <param style="query" required="true" name="password">
          <doc><h:p>The resource owner password.</h:p></doc>
        </param>
        <param style="query" required="false" name="scope">
          <doc><h:p>OPTIONAL. The scope of the access request as
              described by <h:a href="#section-3.3">Section
              3.3</h:a>.</h:p></doc>
        </param>
      </request>
      <response status="200">
        <doc>
          <h:p>The authorization server MUST:</h:p>
          <h:li>require client authentication for confidential clients
            or for any client that was issued client credentials (or
            with other authentication requirements),</h:li>
          <h:li>authenticate the client if client authentication is
            included, and</h:li>
          <h:li>validate the resource owner password credentials using
            its existing password validation algorithm.</h:li>
          <h:p>Since this access token request utilizes the resource
            owner's password, the authorization server MUST protect the
            endpoint against brute force attacks (e.g., using
            rate-limitation or generating alerts).</h:p>
          
          <h:h3 id="section-4.3.3">4.3.3. Access Token Response</h:h3>
          <h:p>If the access token request is valid and authorized,
            the authorization server issues an access token and
            optional refresh token as described in <h:a
              href="#section-5.1">Section 5.1</h:a>. If the request
            failed client authentication or is invalid, the
            authorization server returns an error response as
            described in <h:a href="#section-5.2">Section
              5.2</h:a>.</h:p>
          <h:p>An example successful response:</h:p>
          <h:pre xml:space="preserve">HTTP/1.1 200 OK
 Content-Type: application/json;charset=UTF-8
 Cache-Control: no-store
 Pragma: no-cache

 {
   "access_token":"2YotnFZFEjr1zCsicMWpAA",
   "token_type":"example",
   "expires_in":3600,
   "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
   "example_parameter":"example_value"
 }
   </h:pre>
        </doc>
        <representation href="#success"/>
      </response>
      <response status="400">
        <representation href="#failure"/>
      </response>
    </method>
  </resource_type>
  <resource_type id="client_credentials_grant">
    <doc><h:h2 id="section-4.4">4.4. Client Credentials Grant</h:h2>
      <h:p>The client can request an access token using only its client
        credentials (or other supported means of authentication) when
        the client is requesting access to the protected resources under
        its control, or those of another resource owner that have been
        previously arranged with the authorization server (the method of
        which is beyond the scope of this specification).</h:p>
      <h:p>The client credentials grant type MUST only be used by
        confidential clients.</h:p>
      <h:pre xml:space="preserve"><![CDATA[
  +---------+                                  +---------------+
  |         |                                  |               |
  |         |>--(A)- Client Authentication --->| Authorization |
  | Client  |                                  |     Server    |
  |         |<--(B)---- Access Token ---------<|               |
  |         |                                  |               |
  +---------+                                  +---------------+
    
    Figure 6: Client Credentials Flow
    ]]>
    </h:pre>
      <h:p>The flow illustrated in Figure 6 includes the following
        steps:</h:p>
      <h:ol type="A">
        <h:li>The client authenticates with the authorization server and
          requests an access token from the token endpoint.</h:li>
          <h:li>The authorization server authenticates the client, and
          if valid, issues an access token.</h:li>
      </h:ol>
    </doc>
    <method name="POST">
      <doc>
        <h:h3 id="section-4.4.1">4.4.1. Authorization Request and
          Response</h:h3>
        <h:p>Since the client authentication is used as the
          authorization grant, no additional authorization request is
          needed.</h:p>
      </doc>
      <request>
        <doc>
          <h:h3>4.4.2. Access Token Request</h:h3>
          <h:p> The client makes a request to the token endpoint by
            adding the following parameters using the
            "application/x-www-form-urlencoded" format per Appendix B
            with a character encoding of UTF-8 in the HTTP request
            entity-body:</h:p>
          <h:p>The client MUST authenticate with the authorization
            server as described in <h:a href="#section-3.2.1">Section 3.2.1</h:a>.</h:p>
          <h:p>For example, the client makes the following HTTP request
            using transport-layer security (with extra line breaks for
            display purposes only):</h:p>
          <h:pre xml:space="preserve">POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
    </h:pre>
          <h:p>The authorization server MUST authenticate the
            client.</h:p>
        </doc>
        <param name="grant_type" style="query"
          fixed="client_credentials" required="true">
          <doc><h:p>Value MUST be set to
            "client_credentials".</h:p></doc>
        </param>
        <param name="scope" style="query" required="false">
          <doc><h:p>OPTIONAL. The scope of the access request as
              described by <h:a href="#section-3.3">Section 3.3</h:a>.</h:p></doc>
        </param>
      </request>
      <response status="200">
        <doc>
          <h:h3 id="section-4.4.3">4.4.3. Access Token Response</h:h3>
          <h:p>If the access token request is valid and authorized, the
            authorization server issues an access token as described in
            <h:a href="#section-5.1">Section 5.1</h:a>. A refresh token SHOULD NOT be included. If the
            request failed client authentication or is invalid, the
            authorization server returns an error response as described
            in <h:a href="#section-5.2">Section 5.2</h:a>. </h:p>
          <h:p>An example successful response:</h:p>
          <h:pre xml:space="preserve">HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
"access_token":"2YotnFZFEjr1zCsicMWpAA",
"token_type":"example",
"expires_in":3600,
"example_parameter":"example_value"
}
          </h:pre>
        </doc>
        <representation href="#success"/>
      </response>
      <response status="400">
        <representation href="#failure"/>
      </response>
    </method>
  </resource_type>
</application>
